from pyspark.ml.classification import LinearSVC
from pyspark.ml.evaluation import BinaryClassificationEvaluator
from pyspark.ml.tuning import CrossValidator, ParamGridBuilder
from pyspark.ml.feature import VectorAssembler
from pyspark.mllib.evaluation import BinaryClassificationMetrics
import matplotlib.pyplot as plt

df=tx_facts.select('avg_txn_per_week','std_txn_per_week','hh_tag')
# df.printSchema()
df=df.withColumn('label',
                  when (F.col('hh_tag')=='Redeemeer',1)
                  .when ((F.col('hh_tag')=='nonRedeemeer_nonClipper')|(F.col('hh_tag')=='nonRedeemeer_Clipper'),0))
# display(df)
#-- Feature Engineering, First try: Just considering one feature per class
# ftr_vector=['avg_txn_per_week','std_txn_per_week']
ftr_vector=['std_txn_per_week']
assembler = VectorAssembler(inputCols=['std_txn_per_week'], outputCol="ftr")
df=assembler.transform(df)

test,train=df.randomSplit([0.8,0.2],seed=12345)
print('test size:')
test.groupBy('label').count().show()
print('train size:')
train.groupBy('label').count().show()

#-- Define classifier model:
svm = LinearSVC(labelCol="label", featuresCol="ftr", maxIter=20, regParam=0.1)

model=svm.fit(train)

#-- Metrics
predictions = model.transform(test)
predictions.groupBy('prediction').count().show()
